============================
Prerequisites:
============================

Installing some prerequisites will probably require root access.

You need these packages to use GEMS:

	* openssl 
	* git 
	* python 
        * python-dev (need Python.h for your version)
	* swig 
	* kernel headers
	* qmake
	* qt4-dev-tools
	* boost

Installation instructions will vary according to system.  If you use
ubuntu, you should be able to use a command like this:

sudo apt-get install openssl git python3 python3-dev swig build-essential qt4-qmake qt4-dev-tools libboost-all-dev 

If you use another operating system, please check the installation instructions for it.

============================
Obtaining the software:
============================

The following does not require root access.

Change to directory in which you want GEMS to exist

	1. Get GEMS from git repo
		git clone https://github.com/GLYCAM-Web/gems.git
	2. Change directory to gems
		cd gems
	3. Get GMML from git repo
		git clone https://github.com/GLYCAM-Web/gmml.git gmml
		(you need the repo to be gmml rather than GMML as with the default clone)
		
============================
Compiling and Installing:
============================

You should still be in the gems directory.

        1. Set PYTHON_HOME to the location of the Python.h file for your
                version of python.  A likely choice for Ubuntu-style OS's is:

                export PYTHON_HOME=/usr/include/python3.4  
                    -or-
                setenv PYTHON_HOME /usr/include/python3.4

	2. Run make.sh file in order to compile gmml and create the gems interface
		./make.sh

============================
Testing the Installation:
============================

Testing the installation requires BASH.  This is already installed on most 
systems.  If the command "which bash" returns no information, contact your
system administrator.

	1. Run the following command:
		./test_installation.bash
	2. See the output.

============================
Documentation:
============================

Find more documentation online at:

        http://glycam.org/gems
        http://glycam.org/gmml

============================
Example Use:
============================

Make sure you are still in the gems directory where you typed make and tested
the installation.

	1. Try the command that was used for the test:

python2.7 pdbpreprocessing.py -amino_libs "gmml/dat/CurrentParams/leaprc.ff12SB_2014-04-24/amino12.lib","gmml/dat/CurrentParams/leaprc.ff12SB_2014-0
4-24/aminont12.lib","gmml/dat/CurrentParams/leaprc.ff12SB_2014-04-24/aminoct12.lib" -prep "gmml/dat/CurrentParams/leaprc_GLYCAM_06j-1_2014-03-14/GLY
CAM_06j-1.prep" -pdb "gmml/example/pdb/Small_to_test.pdb" > testing.log 2> testing.error

	2. Try similar sample commands at the tops of files named *.py.  They will
		be in the comments near the top of the file and will come just after
		a line that says "#SAMPLE COMMAND :".


